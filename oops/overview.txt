1 what is oops?
oops is a programming technique in which all the things work around objects .//.

2 what is object ?
object is an programming entity which has two things 
1 state 
2 behaviour 

3 why we use oops?
to increase the readability and managability of the code.

4 what is class?
it is a user defined datatype

5 making of class.
class name of class (constructors) {
    properties -> properties include all the variables to be used ,
}
* new learning *
for finding the memory size , we can use SizeOf()

* in case of empty class , 1 byte of memory is alloted to it 
 
 6 How to  access properties/data members ?
 using . operator 
 ie ramesh.health

7 Access modifiers :
access modifiers have the work of taking care weather the contents of the class should be accesible outside the class also.
 
 8 public:
 the properties of class which are public can be accessed anywhere in the file.
 
 9 private:
the properties of class which are private can be accessed anywhere in the class but not outside the class.

10 protected:
the properties of class which can be accesed outside the class also but with some conditions.

11 what are getters and setters ?
getters and setters are generally used to make the properties as function so that they are easily accesible anywhere in the code.
Getters: These are methods that are used to access the value of a private attribute from outside the class.
Setters: These are methods that are used to modify the value of a private attribute from outside the class. 

12 Padding and greedy alignment:
padding reffers to adding extra bytes to the structure or class for better alignment ..
greedy alignment:
used to minimize the use of padding .

13 static allocation:
initialized once , no heap values , single values and initial and final values of the variable are same .
example:
hero a ;
cout<<a.health<<endl

14 dynamic allocation:
initialized once , contains heap values ,initial value is different and final value is changed using * new name= new value;
hero* b = new hero;
cout<< (*b).level<<endl;

15 this keyword:
this keyword is used for reffering to that particular value with which it is used .
even if the variable has any other value , we can edit it.

16 copy constructors:
hero R(Suresh){
    r.health= Suresh.health;
}

17 shallow copy :
shallow copy reffers to when the constructor uses same memory location on using copy constructor .

18 deep copy :
deep copy reffers to when the constructor uses new memory location on using copy constructor

* instance is basically the object of class *

* methods which are automatically executed everytime you create an object are called constructors*.
 
